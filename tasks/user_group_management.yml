---

# Loop through provided list and ensure group is in the system, with correct attributes
- name: Ensure specified groups exist with correct attributes
  ansible.builtin.group:
    name: "{{ item.name }}"
    gid: "{{ item.gid | default(omit) }}"
    state: present
  loop: "{{ user_group_add }}"
  loop_control:
    label: "{{ item.name }}"
  when: user_group_add is defined

# Loop through provided list and ensure user is not present in the system
- name: Ensure specified groups do not exist in the system
  ansible.builtin.group:
    name: "{{ item }}"
    state: absent
  loop: "{{ user_group_remove | default([], true) }}"
  when: user_group_remove is defined


# Loop through provided list and ensure user is in the system, with correct attributes
- name: Ensure specified user accounts exist with correct attributes
  include_tasks: create_user.yml
  loop: "{{ user_account_add }}"
  loop_control:
    label: "{{ item.name }}"
  when: user_account_add is defined

# Update current
- name: Update
  ansible.builtin.set_fact:
    ansible_become_pass: "{{ user_new_password }}"
  when:
    - user_new_password is defined
    - user_new_password | length > 0

# Loop through provided list and ensure user is not present in the system
- name: Ensure specified user accounts do not exist in the system
  ansible.builtin.user:
    name: "{{ item }}"
    state: absent
    remove: yes
  loop: "{{ user_account_remove | default([], true) }}"
  when: user_account_remove is defined

# Add/remove aliases from bashrc
- name: Add/Remove aliases from user's .bashrc  # noqa: args[module]
  vars:
    homepath: "{{ '/root/.bashrc' if item.user == 'root' else '/home/' + item.user + '/.bashrc' }}"
  ansible.builtin.lineinfile:
    path: "{{ homepath }}"
    regex: '^alias\s+{{ item.alias }}='
    line: "alias {{ item.alias }}='{{ item.command }}'"
    state: "{{ item.state }}"
    mode: '0640'
    create: no
  loop: "{{ user_alias | default([], true) }}"
